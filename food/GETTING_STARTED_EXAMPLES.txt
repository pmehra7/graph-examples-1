---------------------------------
|  // FOR CLEANUP                |
|  :> g.V().drop().iterate()     |
|  :> system.dropGraph('test')   |
|  // TO GET WHAT GRAPHS EXIST   |
|  :> system.getGraphs()         |
---------------------------------

// CONNECT TO GREMLIN SERVER
gremlin> :remote connect tinkerpop.server conf/remote-objects.yaml
==>Connected - localhost/127.0.0.1:8182

// CREATE GRAPH "TEST"
gremlin> :> system.createGraph("test").ifNotExist().build()
==>test

// CONFIG GRAPH TRAVERSAL g TO ALIAS test.g
gremlin> :remote config alias g test.g
==>g=test.g

// CONFIG TIMEOUT TO MAXIMUM VALUE
gremlin> :remote config timeout max
==>Set remote timeout to 2147483647ms

// CHECK THAT NO VERTICES EXIST
gremlin> :> g.V().count()
=>0

// ENTER AUTHOR VERTEX
gremlin> :> juliaChild = graph.addVertex(label,'author','id', 1, 'aname','Julia Child', 'gender','F')
==>v[{member_id=0, community_id=184435, ~label=author, group_id=3}]

// CHECK THAT ONE VERTEX NOW EXISTS
gremlin> :> g.V().count()
=>1

// GET VALUEMAP
gremlin> :> g.V().valueMap()
==>[gender:[F], aname:[Julia Child], id:[1]]

// SHOW USE OF VALUES FOR ONE PROPERTY
gremlin> :> g.V().values('aname')
==>Julia Child

// ENTER BOOK VERTEX
gremlin> :> artOfFrenchCookingVolOne = graph.addVertex(label, 'book', 'id', 100,'bookTitle', 'The Art of French Cooking, Vol. 1', 'publishDate', 1961)
==>v[{member_id=0, community_id=264788, ~label=book, group_id=2}]

// GET ALL BOOKS - THERE IS CURRENTLY ONLY ONE
gremlin> :> g.V().hasLabel('book').values('bookTitle')
==>The Art of French Cooking, Vol. 1

// ENTER AUTHOR-BOOK EDGE
gremlin> :> juliaChild.addEdge('authored', artOfFrenchCookingVolOne)
==>e[{out_vertex={member_id=0, community_id=184435, ~label=author, group_id=2}, local_id=312468c0-b99a-11e5-bdeb-e778035ca1a5, 
in_vertex={member_id=0, community_id=113313, ~label=book, group_id=4}, ~type=authored}][{member_id=0, community_id=184435, 
~label=author, group_id=2}-authored->{member_id=0, community_id=113313, ~label=book, group_id=4}]

// CHECK THAT EDGE IS CREATED USING COUNT
gremlin> :> g.E().count()
==>1
----------
// RUN A SCRIPT TO ADD MORE VERTICES AND EDGES
//script = new File('/path/to/script/generateRecipe.groovy').text; []
gremlin> script = new File('/home/ubuntu/generateRecipe.groovy').text; []
gremlin> :> @script

// GET VERTEX FOR PARTICULAR AUTHOR
gremlin> :> g.V().has('aname','Julia Child')
==>v[{member_id=0, community_id=184435, ~label=author, group_id=2}]

// GET EDGES FROM PARTICULAR AUTHOR VERTEX
gremlin> :> g.V().has('aname','Julia Child').outE('authored')
==>e[{out_vertex={member_id=0, community_id=966350, ~label=author, group_id=3}, local_id=1c947f80-ba67-11e5-bdeb-e778035ca1a5, in_vertex={member_id=0, community_id=966350, ~label=book, group_id=14}, ~type=authored}][{member_id=0, community_id=966350, ~label=author, group_id=3}-authored->{member_id=0, community_id=966350, ~label=book, group_id=14}]
==>e[{out_vertex={member_id=0, community_id=184435, ~label=author, group_id=4}, local_id=c41d5980-ba61-11e5-bdeb-e778035ca1a5, in_vertex={member_id=0, community_id=966350, ~label=book, group_id=1}, ~type=authored}][{member_id=0, community_id=184435, ~label=author, group_id=4}-authored->{member_id=0, community_id=966350, ~label=book, group_id=1}]

// GET BOOK TITLES FOR ALL AUTHORS
// Note duplication for multiple authors
gremlin> :> g.V().outE('authored').inV().values('bookTitle')
==>The Art of Simple Food: Notes, Lessons, and Recipes from a Delicious Revolution
==>The Art of Simple Food: Notes, Lessons, and Recipes from a Delicious Revolution
==>Simca's Cuisine: 100 Classic French Recipes for Every Occasion
==>The Art of French Cooking, Vol. 1
==>The Art of Simple Food: Notes, Lessons, and Recipes from a Delicious Revolution
==>The Art of French Cooking, Vol. 1
==>Simca's Cuisine: 100 Classic French Recipes for Every Occasion
==>The Art of French Cooking, Vol. 1
==>The French Chef Cookbook

// DEDUPLICATE THE LAST LISTING
gremlin> :> g.V().outE('authored').inV().values('bookTitle').dedup()
==>Simca's Cuisine: 100 Classic French Recipes for Every Occasion
==>The Art of French Cooking, Vol. 1
==>The Art of Simple Food: Notes, Lessons, and Recipes from a Delicious Revolution
==>The French Chef Cookbook

// GET BOOK TITLES FOR PARTICULAR AUTHOR
// Uses outE() and inV() which is overkill - edge information is not needed, just passed through
gremlin> :> g.V().has('aname','Julia Child').outE('authored').inV().values('bookTitle')
==>The Art of French Cooking, Vol. 1
==>The French Chef Cookbook

// GET BOOK TITLES FOR PARTICULAR AUTHOR
// Use out() which gets next vertex
gremlin> :> g.V().has('aname','Julia Child').out('authored').values('bookTitle')
==>The Art of French Cooking, Vol. 1
==>The French Chef Cookbook

// GET BOOK TITLES FOR PARTICULAR AUTHOR WITH A PUBLISH DATE GREATER THAN 1967
 gremlin> :> g.V().has('aname','Julia Child').out('authored').has('publishDate', gt(1967)).values('bookTitle')
==>The French Chef Cookbook

// FOR EACH VERTEX LABEL, GET THE NUMBER OF VERTICES
gremlin> :> g.V().label().groupCount()
==>[ingredient:31, author:10, book:4, recipe:8]

// WRITE THE DATA TO A GRYO FILE
gremlin> :> graph.io(IoCore.gryo()).writeGraph("/home/ubuntu/recipe.gryo")
==>NULL

// LOAD DATA USING GRYO
gremlin> :> graph.io(IoCore.gryo()).readGraph("/home/ubuntu/recipe.gryo")
==>NULL

****** ADDED TO QUERY/TRAVERSAL PAGES

// RUN SCRIPT TO ADD RECIPE REVIEWS
gremlin> script2 = new File('/home/ubuntu/generateReviews.groovy').text; []
gremlin> :> @script2

// GET A COUNT OF REVIEWS
gremlin> :> g.V().hasLabel('reviewer').count()
==>5

// GET THE VALUES FOR ALL REVIEWERS TO CHECK
gremlin> :> g.V().hasLabel('reviewer').values()
==>401
==>John Smith
==>403
==>Sharon Smith
==>404
==>Betsy Jones
==>402
==>Jane Doe
==>400
==>John Doe

// GET THE VALUEMAP FOR EACH EDGE THAT HAS MORE THAN 3 STARS
gremlin> :> g.E().hasLabel('rated').has('stars', gt(3)).valueMap()
==>[stars:4, ratedDate:2014-01-23]
==>[comment:Yummy!, stars:5, ratedDate:2014-02-01]
==>[comment:Loved this soup! Yummy vegetarian!, stars:5, ratedDate:2015-12-30]
==>[comment:Pretty tasty!, stars:5, ratedDate:2014-01-01]
==>[comment:Really spicy - be careful!, stars:4, ratedDate:2015-12-31]

// GET THE RECIPES THAT HAVE A RATING HIGHER THAN 3 STARS
gremlin>  :> g.E().hasLabel('rated').has('stars', gt(3)).inV().values('recipeTitle')
==>Beef Bourguignon
==>Spicy Meatloaf
==>Beef Bourguignon
==>Carrot Soup
==>Beef Bourguignon

// GET THE VALUEMAP FOR EACH EDGE THAT HAS MORE THAN 3 STARS AND A RATED DATE GREATER THAN JAN 1, 2015
// Need to figure out dates!! Notice how the date value is parsed by greater than is not correct

gremlin> :> g.E().hasLabel('rated').has('stars', gt(3)).has('ratedDate', gt('2015-01-01')).valueMap()
==>[comment:Loved this soup! Yummy vegetarian!, stars:5, ratedDate:2015-12-30]
==>[comment:Really spicy - be careful!, stars:4, ratedDate:2015-12-31]

// MEAN STARS
gremlin> :> g.E().hasLabel('rated').values('stars').mean()
==>4.142857142857143

// FIND  THE MAX NUMBER OF RECIPE REVIEWS BY A SINGLE REVIEWER
gremlin> :> g.V().hasLabel('reviewer').map(outE('rated').count()).max()
==>2

gremlin> :> g.V().hasLabel('reviewer').as('reviewer','starCount').select('reviewer','starCount').by('revname').by(outE('rated').values('stars').mean())
==>[reviewer:Jane Doe, starCount:5.0]
==>[reviewer:Betsy Jones, starCount:NaN]
==>[reviewer:John Doe, starCount:4.5]
==>[reviewer:John Smith, starCount:4.0]
==>[reviewer:Sharon Smith, starCount:3.0]

gremlin> :> g.V().hasLabel('reviewer').as('reviewer','starCount').select('reviewer','starCount').by('revname').by(outE('rated').values('stars').mean()).order().by(select('starCount'), decr)
==>[reviewer:Betsy Jones, starCount:NaN]
==>[reviewer:Jane Doe, starCount:5.0]
==>[reviewer:John Doe, starCount:4.5]
==>[reviewer:John Smith, starCount:4.0]
==>[reviewer:Sharon Smith, starCount:3.0]

gremlin> :> g.V().hasLabel('reviewer').as('reviewer','starCount').select('reviewer','starCount').by('revname').by(coalesce(outE('rated').values('stars'),constant(0)).mean()).order().by(select('starCount'), decr)
==>[reviewer:Jane Doe, starCount:5.0]
==>[reviewer:John Doe, starCount:4.5]
==>[reviewer:John Smith, starCount:4.0]
==>[reviewer:Sharon Smith, starCount:3.0]
==>[reviewer:Betsy Jones, starCount:0.0]

**************************
NOT ADDED TO EAP DOC YET
**************************
// THIS IS THE ACTUAL ONE! What did John Doe have to say?
gremlin> :> g.V().hasLabel('reviewer').has('revname','John Doe').outE('rated').values('comment')
==>Pretty tasty!
==>Really spicy - be careful!

gremlin> :> g.V().hasLabel('reviewer').has('revname','John Doe').outE('rated').inV().values('recipeTitle')
==>Beef Bourguignon
==>Spicy Meatloaf

gremlin> :> g.V().hasLabel('reviewer').as('reviewer','starCount', 'recipe').select('reviewer','starCount','recipe').by('revname').by(outE('rated').values('stars').mean()).by(out('recipe').values('recipeTitle'))

// RECIPES THAT CONTAIN BEEF
gremlin> :> g.V().hasLabel('recipe').out().has('iName','beef').in().hasLabel('recipe').values('recipeTitle')
==>Beef Bourguignon

// RECIPES THAT CONTAIN EITHER BEEF OR CARROTS
gremlin> :> g.V().hasLabel('recipe').out().has('iName',within('beef','carrots')).in().hasLabel('recipe').values('recipeTitle')
==>Beef Bourguignon
==>Carrot Soup

gremlin> :> g.V().group().by(label).by('aname')
==>[author:[Fritz Streiff, Kelsie Kerr, Patricia Curtan, Julia Child, Patricia Simon, Emeril Lagasse, Simone Beck, Louisette Bertholie, James Beard, Alice Waters]]

gremlin> :> g.V().hasLabel('author').as('a','b').select('a','b').by('aname').by(outE('authored').count())
==>[a:Julia Child, b:2]
==>[a:Patricia Curtan, b:1]
==>[a:Fritz Streiff, b:1]
==>[a:Kelsie Kerr, b:1]
==>[a:James Beard, b:0]
==>[a:Alice Waters, b:1]
==>[a:Patricia Simon, b:1]
==>[a:Simone Beck, b:2]
==>[a:Louisette Bertholie, b:1]
==>[a:Emeril Lagasse, b:0]

gremlin>  :> g.V().hasLabel('author').as('a','wrote').select('a','wrote').by('aname').by(outE('authored').count())
==>[a:James Beard, wrote:0]
==>[a:Simone Beck, wrote:2]
==>[a:Julia Child, wrote:2]
==>[a:Emeril Lagasse, wrote:0]
==>[a:Patricia Simon, wrote:1]
==>[a:Louisette Bertholie, wrote:1]
==>[a:Kelsie Kerr, wrote:1]
==>[a:Alice Waters, wrote:1]
==>[a:Fritz Streiff, wrote:1]
==>[a:Patricia Curtan, wrote:1]

// How many recipes has Julia Child written?
gremlin> :> g.V().hasLabel('recipe').in().has('aname','Julia Child').count()
==>1

// CLEANER VERSION OF LAST TRAVERSAL
gremlin> :> g.V().hasLabel('ingredient').has('iName',within('beef','carrots')).in().hasLabel('recipe').values('recipeTitle')
==>Beef Bourguignon
==>Carrot Soup

gremlin> :> g.V().hasLabel('recipe').in().has('aname','Julia Child').count().profile().cap(TraversalMetrics.METRICS_KEY)
==>Traversal Metrics
Step                                                               Count  Traversers       Time (ms)    % Dur
=============================================================================================================
DsegGraphStep([~label.eq(recipe)])                                     8           8          17.134    17.43
  query-optimizer                                                                              0.399
  sub-query                                                                                    0.000
  iterator-setup                                                                               0.281
DsegVertexStep(IN,vertex)                                             13          13          17.106    17.40
  query-optimizer-total                                                                        0.117
  sub-query-total                                                                              0.000
  iterator-setup-total                                                                         1.885
HasStep([aname.eq(Julia Child)])                                       1           1          23.307    23.71
CountGlobalStep                                                        1           1          17.204    17.50
SideEffectCapStep([~metrics])                                          1           1          23.546    23.95
                                            >TOTAL                     -           -          98.299        -


*** 
IDEA: categories for recipes
separate vertex type?
****


*** DONE ABOVE WITH AUTHORS AND BOOKS
// For each category vertex, emit a map of its name and the number of movies it represents.
// Both a vertex type category and an edge label category - this is from movie lens
g.V().hasLabel('category').as('a','b').
 select('a','b').
    by('name').
    by(inE('category').count())
***************
    
// For each movie, emit a map of its name and average rating. Sort maps in decr. order by avg rating. Top 10 only
g.V().hasLabel('movie').as('a','b').
 select('a','b').
    by('name').
    by(inE('rated').values('stars').mean()).
  order().by(select('b'), decr).
  limit(10)
  
  actually needs to be to fix empty stars value:
  
 g.V().hasLabel('movie').as('a','b').
  select('a','b').
    by('name').
    by(coalesce(
      inE('rated').values('stars'), constant()).mean()).
  order().by(select('b'), decr).
  limit(10) 
  
  // For each movie with at least 11 ratings emit a map of its name and avg rating. sort maps in decr order by avg rating. Top 10 only
  g.V().hasLabel('movie').as('a','b').
    where(inE('rated').count().is(gt(10))).
    select('a','b').
      by('name').
      by(inE('rated').values('stars').mean()).
    order().by(select('b'), decr).
    limit(10)
    
    // Which programmers like Die Hard and what other movies do they like? Group and count the movies by their name.
    // Sort group count map in decr order by count. Clip map to top 10 and stream out map's entries
    
  g.V().has('movie','name','Die Hard').as('a').
    inE('rated').has('stars',5).outV().
      where(out('occupation').has('name','programmer')).
    outE('rated').has('stars',5).inV(). 
      where(neq('a')).
    groupCount().by('name').
      order(local).by(valueDecr).
      limit(local,10).
      unfold()   // this puts each movie on its own line
      
--------------
WHAT I DON'T DO THAT STEPHEN DOES:
--------
$ curl -L -O http://snap.stanford.edu/data/wiki-Vote.txt.gz
$ gunzip wiki-Vote.txt.gz

SCRIPT:
graph = TinkerGraph.open()
graph.createIndex('userId', Vertex.class) (1)

gremlin> g = graph.traversal()

getOrCreate = { id ->
  g.V().has('userId', id).tryNext().orElseGet{ g.addV('userId', id).next() }
}

new File('wiki-Vote.txt').eachLine {
  if (!it.startsWith("#")){
    (fromVertex, toVertex) = it.split('\t').collect(getOrCreate) (2)
    fromVertex.addEdge('votesFor', toVertex)
  }
}

Gremlin server/REST example 

$ curl -L -O https://www.apache.org/dist/incubator/tinkerpop/3.1.0-SNAPSHOT/apache-gremlin-server-3.1.0-SNAPSHOT-bin.zip
$ unzip apache-gremlin-server-3.1.0-SNAPSHOT-bin.zip
$ cd apache-gremlin-server-3.1.0-SNAPSHOT-bin.zip
$ bin/gremlin-server.sh conf/gremlin-server-modern.yaml
$ curl -X POST -d "{\"gremlin\":\"g.V(x).out().values('name')\", \"language\":\"gremlin-groovy\", \"bindings\":{\"x\":1}}" "http://localhost:8182"