// TRAVERSAL EXAMPLES

------------------------------------------------------
/* SIMPLE TRAVERSAL:                                */
/* traverses through a series of traversal steps    */
------------------------------------------------------

// How many recipes exist in the database?
g.V().hasLabel('recipe').count()
==>8

// How many recipes has Julia Child written?
g.V().hasLabel('recipe').in().has('aname','Julia Child').count()
==>3

// Which recipes list beef as an ingredient?
g.V().hasLabel('recipe').out().has('iName','beef').in().hasLabel('recipe').values('recipeTitle')
==>Beef Bourguignon

// Which recipes list beef or carrots as ingredients?
g.V().hasLabel('recipe').out().has('iName',within('beef','carrots')).in().hasLabel('recipe').values('recipeTitle')
==>Beef Bourguignon
==>Carrot Soup

// Which cookbooks list Julia Child as an author?
g.V().has('aname','Julia Child').out('authored').values('bookTitle')
==>The Art of French Cooking, Vol. 1
==>The French Chef Cookbook

// Which cookbooks were published in 1968?
g.V().hasLabel('book').has('publishDate',1968).values('bookTitle')
==>The French Chef Cookbook

// Which cookbooks did Julia Child write after 1968?
g.V().has('aname','Julia Child').out('authored').has('publishDate', gt(1967)).values('bookTitle')
==>The French Chef Cookbook

// NOT QUITE RIGHT
// What cookbooks have recipes that list beef or carrots as ingredients, order by title?
g.V().hasLabel('recipe').out().
	has('iName',within('beef','carrots')).
	in().hasLabel('recipe').values('recipeTitle').
	out().hasLabel('book').values('bookTitle').order()

// What are the recipes included in the cookbooks that list beef and mashed garlic as ingredients?
g.V().hasLabel('recipe').out().has('name',within('beef','mashed garlic')).out().hasLabel('book').out().hasLabel('recipe').valueMap('rName')

// Profile to discover how various traversal strategies will work for a query
// This profiles the last traversal
g.V().hasLabel('recipe').out().
      has('name',within('beef','carrots')).out().
      hasLabel('book').out().hasLabel('recipe').valueMap('rName').
      profile().cap(TraversalMetrics.METRICS_KEY)

// TimeLimit of 2 ms for the traversal
g.V().hasLabel('recipe').out().
      has('name',within('beef','carrots')).out().
      hasLabel('book').out().hasLabel('recipe').valueMap('rName').
      timeLimit(2)

// How many reviewers have reviewed Beef Bourguignon?
g.V().hasLabel('recipe').has('recipeTitle','Beef Bourguignon').out().hasLabel('reviewer').count()

// What did a particular reviewer say about Beef Bourguignon?
// This is "what did John Doe say about any recipe?
g.V().hasLabel('reviewer').has('revname','John Doe').outE('rated').values('comment')

// What reviewers rated Beef Bourguignon in the last 15 days?
// NOT SURE HOW TO DO "last 15 days" -- now()-15 is a placeholder
// Don't need to include "hasLabel('recipe')" because reviewers only have edges to recipes
g.V().hasLabel('reviewer').outE().has('reviewDate',lt(now()-15)).outV().has('rName','Beef Bourguignon')

// Which reviewers who rated Beef Bourguignon with 5 stars rated other recipes?
// NEED HELP WITH THIS ONE -- probably another type of TRAVERSAL
// Don't need to include "hasLabel('recipe')" because reviewers only have edges to recipes
g.V().hasLabel('reviewer').outE().has('stars',5).outV().has('rName','Beef Bourguignon')

// What other recipes did reviewers who rated Beef Bourguignon with 5 stars also rate with 5 stars?
// NEED TO USE AGGREGATE STEP? SEEMS LIKE THAT IS THE WAY TO DO THIS

// Which meals list Beef Bourguignon as an item?
g.V().hasLabel('meal').out().has('name','beef')

// Which meals have a calorie count of 1,100 calories or less? 
// COULD is() BE USED IN THIS TRAVERSAL?
g.V().hasLabel('meal').has('calories',lt(1100)).valueMap('mName')

// Which meals have a calorie count of 1,100 calories or less (limit the output to 10 meal names)? 
// COULD is() BE USED IN THIS TRAVERSAL?
g.V().hasLabel('meal').has('calories',lt(1100)).valueMap('mName').limit(10)

----------------------------------------------------------
/* BRANCHING TRAVERSAL:					*/
/* traversal will be sent down a single branch		*/ 
/* (choose), a subset of branches (repeat.emit)		*/ 
/* or all branches (union)				*/
----------------------------------------------------------

// If the vertex selected is an author, then count the number of outgoing edges "created"; else if the vertex selected is a reviewer, then count the number of outgoing
edges "rated"; otherwise, do nothing.
g.V().choose(label()).
 option("author", out("created").count()).
 option("reviewer", out("rated").count()).
 option(none, label())
 
// example I tried
gremlin> :> g.V().choose(label()).option('author', out('created').count()).option('reviewer', out('rated').count())
==>0
==>0
==>2
==>0
==>0
==>0
==>2
==>1
==>0
==>0
==>0
==>3
==>0
==>2
==>2
==>1
==>2

----------------------------------------------------------
/* RECURSIVE TRAVERSAL:					*/
/* loops to traverse a step already traversed		*/
----------------------------------------------------------

// Return the names of the vertices 2 outgoing steps from the vertex named "Julia Child". This will likely include cookbooks, meals, reviewers, and ingredients.
gremlin> :> g.V().has('aname','Julia Child').repeat(out()).times(2).valueMap()
==>[iName:[beef], id:[300]]
==>[iName:[onion], id:[301]]
==>[iName:[mashed garlic], id:[302]]
==>[iName:[butter], id:[303]]
==>[iName:[tomato paste], id:[304]]
==>[publishDate:[1961], id:[100], bookTitle:[The Art of French Cooking, Vol. 1]]
==>[iName:[mashed garlic], id:[302]]
==>[iName:[eggplant], id:[305]]
==>[iName:[zucchini], id:[306]]
==>[iName:[olive oil], id:[307]]
==>[iName:[yellow onion], id:[308]]
==>[iName:[olive oil], id:[307]]
==>[iName:[green beans], id:[309]]
==>[iName:[tuna], id:[310]]
==>[iName:[tomato], id:[311]]
==>[iName:[hard-boiled egg], id:[312]]

// THREE TIMES
gremlin> :> g.V().has('aname','Julia Child').repeat(out()).times(3).valueMap()
==>[instructions:[Braise the beef. Saute the onions and carrots. Add wine and cook in a dutch oven at 425 degrees for 1 hour.], recipeTitle:[Beef Bourguignon], id:[200]]
==>[instructions:[Take a salad bowl or platter and line it with lettuce leaves, shortly before serving. Drizzle some olive oil on the leaves and dust them with salt.], recipeTitle:[Salade Nicoise], id:[202]]
==>[mCreateDate:[2016-01-14], mealTitle:[JuliaDinner], id:[502], calories:[900]]

----------------------------------------------------------
/* PATH TRAVERSAL:					*/
/* maps traverse step to a location to use in case a 	*/
/* step must revisit a previous location in the full 	*/
/* traversal						*/
----------------------------------------------------------

// WRITE THIS ONE
g.V().as("a").out().as("b","c").path()

----------------------------------------------------------
/* PROJECTING TRAVERSAL:				*/
/* ???							*/
----------------------------------------------------------

// WRITE THIS ONE
g.V().as("a").out("knows").as("b").
select("a","b").
by(in("knows").count()).
by(out("knows").count())

----------------------------------------------------------
/* CENTRALITY TRAVERSAL:				*/
/* uses graph statstics to extract meaningful 		*/
/* information from the graph				*/
----------------------------------------------------------

// WRITE THIS ONE
g.V().repeat(groupCount("m").out()).times(30).cap("m")

----------------------------------------------------------
/* MUTATING TRAVERSAL:					*/
/* mutates the graph					*/
----------------------------------------------------------

// adds an inverse edge createdBy for every created edge
g.V().as("a").out("created").addOutE("createdBy","a")
// removes the original created edge
g.V().outE("created").drop()

----------------------------------------------------------
/* DECLARATIVE TRAVERSAL:				*/
/* pattern matching traversal				*/
----------------------------------------------------------

// WRITE THIS ONE
g.V().match(
  as("a").out("created").as("b"),
  as("b").in("created").count().is(gt(3)),
  as("b").in("created").as("c"),
  as("a").out("father").as("c")).
 dedup("a").
 select("a").by("name")

----------------------------------------------------------
/* DOMAIN SPECIFIC TRAVERSAL:				*/
/* creating traversals using domain-specific language 	*/
/* maps to Gremlin steps				*/
----------------------------------------------------------

//WRITE THIS ONE
g.people().named("marko").
 who().know(well).people().
 who().created("software").
 are().named()

Each one of these steps would be the composite or 1 or more
Gremlin steps.
j
g.people()          → g.V().hasLabel("person")
named("marko")      → has("name","marko")
who()               → identity()
know(well)          → outE("knows").
                      has("weight",gt(0.75)).
                      inV()
created("software") → out("created").
                      hasLabel("software")
are()               → identity()
named()             → values("name")
