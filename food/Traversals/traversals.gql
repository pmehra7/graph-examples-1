// TRAVERSAL EXAMPLES

------------------------------------------------------
/* SIMPLE TRAVERSAL:                                */
/* traverses through a series of traversal steps    */
------------------------------------------------------

// How many recipes exist in the database?
g.V().hasLabel('recipe').count()
==>8

// How many recipes has Julia Child written?
g.V().hasLabel('recipe').in().has('aname','Julia Child').count()
==>3

// Which recipes list beef as an ingredient?
g.V().hasLabel('recipe').out().has('iName','beef').in().hasLabel('recipe').values('recipeTitle')
==>Beef Bourguignon

// Which recipes list beef or carrots as ingredients?
g.V().hasLabel('recipe').out().has('iName',within('beef','carrots')).in().hasLabel('recipe').values('recipeTitle')
==>Beef Bourguignon
==>Carrot Soup

// Which cookbooks list Julia Child as an author?
g.V().has('aname','Julia Child').out('authored').values('bookTitle')
==>The Art of French Cooking, Vol. 1
==>The French Chef Cookbook

// Which cookbooks were published in 1968?
g.V().hasLabel('book').has('publishDate',1968).values('bookTitle')
==>The French Chef Cookbook

// Which cookbooks did Julia Child write after 1968?
g.V().has('aname','Julia Child').out('authored').has('publishDate', gt(1967)).values('bookTitle')
==>The French Chef Cookbook

// What cookbooks have recipes that list beef or carrots as ingredients, order by title?
g.V().hasLabel('recipe').out().
	has('iName',within('beef','carrots')).
	in().hasLabel('recipe').
	out().hasLabel('book').values('bookTitle').
	order()
==>The Art of French Cooking, Vol. 1
==>The Art of Simple Food: Notes, Lessons, and Recipes from a Delicious Revolution

// WHAT IS THE DIFFERENCE BETWEEN THE LAST ONE AND THIS ONE?
//***********************
//***********************
gremlin> :> g.V().hasLabel('recipe').out().union(has('iName','beef'),has('iName','carrots'))
	.in().hasLabel('recipe').out().hasLabel('book').values('bookTitle')
==>The Art of Simple Food: Notes, Lessons, and Recipes from a Delicious Revolution
==>The Art of French Cooking, Vol. 1

// What are the recipes included in the cookbooks that list beef or carrots as ingredients?
g.V().hasLabel('ingredient').has('iName',within('beef','carrots')).
	in().as('Recipe').
	out().hasLabel('book').as('Book').
	select('Book','Recipe').by('bookTitle').by('recipeTitle')
==>[Book:The Art of French Cooking, Vol. 1, Recipe:Beef Bourguignon]
==>[Book:The Art of Simple Food: Notes, Lessons, and Recipes from a Delicious Revolution, Recipe:Carrot Soup]

// Profile to discover how various traversal strategies will work for a query
// This profiles the last traversal
g.V().hasLabel('recipe').out().
      has('name',within('beef','carrots')).out().
      hasLabel('book').out().hasLabel('recipe').valueMap('rName').
      profile().cap(TraversalMetrics.METRICS_KEY)
      
// Another metrics traversal
g.V().hasLabel('recipe').has('recipeTitle', 'Beef Bourguignon').inE('rated').values('comment').profile().cap(TraversalMetrics.METRICS_KEY)
==>Traversal Metrics
Step                                                               Count  Traversers       Time (ms)    % Dur
=============================================================================================================
DsegGraphStep([~label.eq(recipe), recipeTitle.e...                     1           1          15.717    92.51
  query-optimizer                                                                              0.094
  iterator-setup                                                                               0.006
DsegVertexStep(IN,[rated],edge)                                        4           4           1.159     6.82
  query-optimizer                                                                              0.135
  iterator-setup                                                                               0.003
DsegPropertiesStep([comment],value)                                    3           3           0.083     0.49
SideEffectCapStep([~metrics])                                          1           1           0.029     0.17
                                            >TOTAL                     -           -          16.989        -

// TimeLimit of 2 ms for the traversal
g.V().hasLabel('recipe').has('recipeTitle', 'Beef Bourguignon').inE('rated').values('comment').timeLimit(2)
==>Yummy!
==>Pretty tasty!
==>It was okay.

// How many reviewers have reviewed Beef Bourguignon?
g.V().hasLabel('recipe').has('recipeTitle','Beef Bourguignon').in().hasLabel('reviewer').count()
==>4

// What did reviewers say about Beef Bourguignon?
g.V().hasLabel('recipe').has('recipeTitle', 'Beef Bourguignon').inE().values('comment')
==>Yummy!
==>Pretty tasty!
==>It was okay.
// MORE PRECISE - doesn't get all incoming edges
g.V().hasLabel('recipe').has('recipeTitle', 'Beef Bourguignon').inE('rated').values('comment')

// What reviewers rated Beef Bourguignon in the last 15 days?
//*******************
//*******************
// NOT SURE HOW TO DO "last 15 days" -- now()-15 is a placeholder
// Don't need to include "hasLabel('recipe')" because reviewers only have edges to recipes
g.V().hasLabel('reviewer').outE().has('reviewDate',lt(now()-15)).outV().has('recipeTitle','Beef Bourguignon')

// Which reviewers who rated Beef Bourguignon with 5 stars rated other recipes?
// NEED HELP WITH THIS ONE -- probably another type of TRAVERSAL
//********************
//********************

// HERE IS SOMETHING TO CHEW ON
//********************
//********************
gremlin> :> g.V().has('recipe', 'recipeTitle', 'Beef Bourguignon').as('a').inE('rated').has('stars',5).outV().outE('rated').has('stars',5).inV().where(neq('a')).groupCount().by('recipeTitle')
==>[Carrot Soup:1]
// PATTERNED AFTER THIS
    // Which programmers like Die Hard and what other movies do they like? Group and count the movies by their name.
    // Sort group count map in decr order by count. Clip map to top 10 and stream out map's entries
    
  g.V().has('movie','name','Die Hard').as('a').
    inE('rated').has('stars',5).outV().
      where(out('occupation').has('name','programmer')).
    outE('rated').has('stars',5).inV(). 
      where(neq('a')).
    groupCount().by('name').
      order(local).by(valueDecr).
      limit(local,10).
      unfold()   // this puts each movie on its own line

// Which reviewers who rated Beef Bourguignon have also rated other recipes, and what are the recipes?
//********************
//********************
// HOW DO I GET THE NAMES TO PRINT???
g.V().hasLabel('recipe').has('recipeTitle', 'Beef Bourguignon').
	in().hasLabel('reviewer').as('a').
	out().values('recipeTitle').as('b').
	select('a','b')
==>[a:v[{member_id=0, community_id=278744, ~label=reviewer, group_id=1}], b:Carrot Soup]
==>[a:v[{member_id=0, community_id=278744, ~label=reviewer, group_id=1}], b:Beef Bourguignon]
==>[a:v[{member_id=0, community_id=278744, ~label=reviewer, group_id=58}], b:Beef Bourguignon]
==>[a:v[{member_id=0, community_id=278744, ~label=reviewer, group_id=58}], b:Spicy Meatloaf]
==>[a:v[{member_id=0, community_id=278744, ~label=reviewer, group_id=59}], b:Beef Bourguignon]
==>[a:v[{member_id=0, community_id=278744, ~label=reviewer, group_id=60}], b:Beef Bourguignon]
==>[a:v[{member_id=0, community_id=278744, ~label=reviewer, group_id=60}], b:Spicy Meatloaf]

// What other recipes did reviewers who rated Beef Bourguignon with 5 stars also rate with 5 stars?
// NEED TO USE AGGREGATE STEP? SEEMS LIKE THAT IS THE WAY TO DO THIS
//*******************
//*******************

// Which meals list Beef Bourguignon as an item?
g.V().hasLabel('recipe').has('recipeTitle','Beef Bourguignon').in().hasLabel('meal').values('mealTitle')
==>Saturday Feast
==>JuliaDinner

// Which meals have a calorie count of 900 calories or less? 
g.V().hasLabel('meal').has('calories', lte(900)).values('mealTitle')
==>EverydayDinner
==>JuliaDinner

// Which meals have a calorie count of 900 calories or less (limit the output to 10 meal names)? 
g.V().hasLabel('meal').has('calories', lte(900)).values('mealTitle').limit(10)
==>EverydayDinner
==>JuliaDinner

----------------------------------------------------------
/* BRANCHING TRAVERSAL:					*/
/* traversal will be sent down a single branch		*/ 
/* (choose), a subset of branches (repeat.emit)		*/ 
/* or all branches (union)				*/
----------------------------------------------------------

// If the vertex selected is an author, then count the number of outgoing edges "created"; else if the vertex selected is a reviewer, then count the number of outgoing
edges "rated"; otherwise, do nothing.
g.V().choose(label()).
 option("author", out("created").count()).
 option("reviewer", out("rated").count()).
 option(none, label())
 
// example I tried
gremlin> :> g.V().choose(label()).option('author', out('created').count()).option('reviewer', out('rated').count())
==>0
==>0
==>2
==>0
==>0
==>0
==>2
==>1
==>0
==>0
==>0
==>3
==>0
==>2
==>2
==>1
==>2

----------------------------------------------------------
/* RECURSIVE TRAVERSAL:					*/
/* loops to traverse a step already traversed		*/
----------------------------------------------------------

// Return the names of the vertices 2 outgoing steps from the vertex named "Julia Child". This will likely include cookbooks, meals, reviewers, and ingredients.
g.V().has('aname','Julia Child').repeat(out()).times(2).valueMap()
==>[iName:[beef], id:[300]]
==>[iName:[onion], id:[301]]
==>[iName:[mashed garlic], id:[302]]
==>[iName:[butter], id:[303]]
==>[iName:[tomato paste], id:[304]]
==>[publishDate:[1961], id:[100], bookTitle:[The Art of French Cooking, Vol. 1]]
==>[iName:[mashed garlic], id:[302]]
==>[iName:[eggplant], id:[305]]
==>[iName:[zucchini], id:[306]]
==>[iName:[olive oil], id:[307]]
==>[iName:[yellow onion], id:[308]]
==>[iName:[olive oil], id:[307]]
==>[iName:[green beans], id:[309]]
==>[iName:[tuna], id:[310]]
==>[iName:[tomato], id:[311]]
==>[iName:[hard-boiled egg], id:[312]]

// THREE TIMES
g.V().has('aname','Julia Child').repeat(out()).times(3).valueMap()
==>[instructions:[Braise the beef. Saute the onions and carrots. Add wine and cook in a dutch oven at 425 degrees for 1 hour.], recipeTitle:[Beef Bourguignon], id:[200]]
==>[instructions:[Take a salad bowl or platter and line it with lettuce leaves, shortly before serving. Drizzle some olive oil on the leaves and dust them with salt.], recipeTitle:[Salade Nicoise], id:[202]]
==>[mCreateDate:[2016-01-14], mealTitle:[JuliaDinner], id:[502], calories:[900]]

----------------------------------------------------------
/* PATH TRAVERSAL:					*/
/* maps traverse step to a location to use in case a 	*/
/* step must revisit a previous location in the full 	*/
/* traversal						*/
----------------------------------------------------------

// GENERAL CASE
g.V().as("a").out().as("b","c").path()
// WHAT IS THE PATH TRAVERSAL OF THE GIVEN TRAVERSAL?
// INGREDIENT -> RECIPE -> BOOK
g.V().hasLabel('ingredient').has('iName',within('beef','carrots')).in().as('Recipe')
	.out().hasLabel('book').as('Book').
	select('Book','Recipe').
		by('bookTitle').by('recipeTitle').path()
==>[v[{member_id=0, community_id=278744, ~label=ingredient, group_id=24}], 
	v[{member_id=0, community_id=278744, ~label=recipe, group_id=17}], 
	v[{member_id=0, community_id=278744, ~label=book, group_id=13}], 
	{Book=The Art of French Cooking, Vol. 1, Recipe=Beef Bourguignon}]
==>[v[{member_id=0, community_id=278744, ~label=ingredient, group_id=51}], 
	v[{member_id=0, community_id=278744, ~label=recipe, group_id=2}], 
	v[{member_id=0, community_id=278744, ~label=book, group_id=16}], 
	{Book=The Art of Simple Food: Notes, Lessons, and Recipes from a Delicious Revolution, Recipe=Carrot Soup}]

// What is the tree that emanates from a book?	
gremlin> :> g.V().hasLabel('book').in().tree().by('id').next()
==>100={1={}, 2={}, 3={}, 200={}, 202={}}
==>101={2={}, 4={}}
==>102={1={}}
==>103={5={}, 6={}, 7={}, 8={}, 206={}, 207={}}

// What is the tree that emanates from a recipe?
gremlin> :> g.V().hasLabel('recipe').in().tree().by('myId').next()
==>200={400={}, 1={}, 401={}, 402={}, 403={}, 500={}, 502={}}
==>201={1={}}
==>202={1={}, 502={}}
==>203={9={}}
==>204={400={}, 403={}, 9={}}
==>205={500={}, 10={}}
==>206={402={}, 500={}, 5={}, 501={}}
==>207={5={}, 501={}}

// What are all the outgoing tree branches for a recipe?
gremlin> :> g.V().hasLabel('recipe').out().tree().by('myId').next()
==>200={304={}, 100={}, 300={}, 301={}, 302={}, 303={}}
==>201={305={}, 306={}, 307={}, 308={}, 302={}}
==>202={307={}, 100={}, 309={}, 310={}, 311={}, 312={}}
==>203={308={}, 313={}, 314={}}
==>204={315={}, 316={}, 301={}, 317={}, 318={}, 319={}}
==>205={320={}, 321={}, 322={}, 323={}, 324={}, 325={}, 316={}}
==>206={326={}, 327={}, 103={}, 328={}, 301={}, 303={}}
==>207={103={}, 328={}, 329={}, 330={}}

----------------------------------------------------------
/* PROJECTING TRAVERSAL:				*/
/* ???							*/
----------------------------------------------------------

// WRITE THIS ONE
g.V().as("a").out("knows").as("b").
select("a","b").
by(in("knows").count()).
by(out("knows").count())

----------------------------------------------------------
/* CENTRALITY TRAVERSAL:				*/
/* uses graph statstics to extract meaningful 		*/
/* information from the graph				*/
----------------------------------------------------------

// WRITE THIS ONE
g.V().repeat(groupCount("m").out()).times(30).cap("m")

----------------------------------------------------------
/* MUTATING TRAVERSAL:					*/
/* mutates the graph					*/
----------------------------------------------------------

// adds an inverse edge isAuthoredBy for every authored edge
g.V().as('a').out('authored').addOutE('isAuthoredBy','a')
// removes the original created edge
g.V().outE('authored').drop()

----------------------------------------------------------
/* DECLARATIVE TRAVERSAL:				*/
/* pattern matching traversal				*/
----------------------------------------------------------

// WRITE THIS ONE
g.V().match(
  as("a").out("created").as("b"),
  as("b").in("created").count().is(gt(3)),
  as("b").in("created").as("c"),
  as("a").out("father").as("c")).
 dedup("a").
 select("a").by("name")

----------------------------------------------------------
/* DOMAIN SPECIFIC TRAVERSAL:				*/
/* creating traversals using domain-specific language 	*/
/* maps to Gremlin steps				*/
----------------------------------------------------------

//FOR RECIPE TOY GRAPH
g.people().named("marko").
 who().know(well).people().
 who().created("software").
 are().named()

Each one of these steps would be the composite or 1 or more
Gremlin steps.

g.people()          → g.V().hasLabel('person')
named('marko')      → has('name','marko')
who()               → identity()
know(well)          → outE("knows").
                      has("weight",gt(0.75)).
                      inV()
created("software") → out("created").
                      hasLabel("software")
are()               → identity()
named()             → values("name")
