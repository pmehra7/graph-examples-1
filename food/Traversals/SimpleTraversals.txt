****** ADDED TO QUERY/TRAVERSAL PAGES

// Generates review vertices and edges for Recipe Toy Graph
// :load /tmp/generateReviews.groovy

// GET A COUNT OF REVIEWS
gremlin> g.V().hasLabel('reviewer').count()
==>5

// GET THE VALUES FOR ALL REVIEWERS TO CHECK
gremlin> g.V().hasLabel('reviewer').values()
==>John Smith
==>Sharon Smith
==>Betsy Jones
==>Jane Doe
==>John Doe

// GET THE VALUEMAP FOR EACH EDGE THAT HAS MORE THAN 3 STARS
gremlin> g.E().hasLabel('rated').has('stars', gt(3)).valueMap()
==>[stars:4, timestamp:2014-01-23]
==>[comment:Yummy!, stars:5, timestamp:2014-02-01]
==>[comment:Loved this soup! Yummy vegetarian!, stars:5, timestamp:2015-12-30]
==>[comment:Pretty tasty!, stars:5, timestamp:2014-01-01]
==>[comment:Really spicy - be careful!, stars:4, timestamp:2015-12-31]

// GET THE RECIPES THAT HAVE A RATING HIGHER THAN 3 STARS
gremlin>  g.E().hasLabel('rated').has('stars', gt(3)).inV().values('name')
==>Beef Bourguignon
==>Spicy Meatloaf
==>Beef Bourguignon
==>Carrot Soup
==>Beef Bourguignon

// GET THE VALUEMAP FOR EACH EDGE THAT HAS MORE THAN 3 STARS AND A RATED DATE GREATER THAN JAN 1, 2015
gremlin> g.E().hasLabel('rated').has('stars',gte(4)).has('timestamp', gte(Instant.parse('2015-01-01T00:00:00.00Z'))).valueMap()
==>[comment:Loved this soup! Yummy vegetarian!, timestamp:2015-12-30T00:00:00Z, stars:5]
==>[comment:Really spicy - be careful!, timestamp:2015-12-31T00:00:00Z, stars:4]

// MEAN STARS
gremlin> g.E().hasLabel('rated').values('stars').mean()
==>4.142857142857143

// FIND  THE MAX NUMBER OF RECIPE REVIEWS BY A SINGLE REVIEWER
gremlin> g.V().hasLabel('reviewer').map(outE('rated').count()).max()
==>2

gremlin> g.V().hasLabel('reviewer').as('reviewer','starCount').
  select('reviewer','starCount').
    by('name').
    by(outE('rated').values('stars').mean())
==>[reviewer:Jane Doe, starCount:5.0]
==>[reviewer:Betsy Jones, starCount:NaN]
==>[reviewer:John Doe, starCount:4.5]
==>[reviewer:John Smith, starCount:4.0]
==>[reviewer:Sharon Smith, starCount:3.0]

gremlin> g.V().hasLabel('reviewer').as('reviewer','starCount').
  select('reviewer','starCount').
    by('name').
    by(outE('rated').values('stars').mean()).
  order().by(select('starCount'), decr)
==>[reviewer:Betsy Jones, starCount:NaN]
==>[reviewer:Jane Doe, starCount:5.0]
==>[reviewer:John Doe, starCount:4.5]
==>[reviewer:John Smith, starCount:4.0]
==>[reviewer:Sharon Smith, starCount:3.0]

gremlin> g.V().hasLabel('reviewer').as('reviewer','starCount').
  select('reviewer','starCount').
    by('name').
    by(coalesce(outE('rated').values('stars'),constant(0)).mean()).
  order().by(select('starCount'), decr)
==>[reviewer:Jane Doe, starCount:5.0]
==>[reviewer:John Doe, starCount:4.5]
==>[reviewer:John Smith, starCount:4.0]
==>[reviewer:Sharon Smith, starCount:3.0]
==>[reviewer:Betsy Jones, starCount:0.0]

// get the schema with datatypes
graph.schema().traversal().V().valueMap(true)
// partial output
==>[id:32786, dataType:[java.lang.String], name:[mealTitle], label:propertyKey, cardinality:[Single]]
==>[id:32787, dataType:[java.lang.String], name:[mCreateDate], label:propertyKey, cardinality:[Single]]
==>[id:32784, dataType:[java.lang.String], name:[amount], label:propertyKey, cardinality:[Single]]
==>[id:32785, name:[includedIn], directionality:[Bidirectional], label:edgeLabel, cardinality:[Multiple]]
==>[id:32782, dataType:[java.lang.Integer], name:[rCreateDate], label:propertyKey, cardinality:[Single]]
==>[id:32783, name:[includes], directionality:[Bidirectional], label:edgeLabel, cardinality:[Multiple]]
==>[id:32780, name:[authored], directionality:[Bidirectional], label:edgeLabel, cardinality:[Multiple]]
==>[id:32781, name:[created], directionality:[Bidirectional], label:edgeLabel, cardinality:[Multiple]]

**************************
NOT ADDED TO EAP DOC YET
**************************

// THIS IS THE ACTUAL ONE! What did John Doe have to say?
gremlin> :> g.V().has('reviewer', 'name','John Doe').outE('rated').values('comment')
==>Pretty tasty!
==>Really spicy - be careful!

gremlin> :> g.V().has('reviewer', 'name','John Doe').outE('rated').inV().values('name')
==>Beef Bourguignon
==>Spicy Meatloaf

gremlin> :> g.V().has('reviewer').as('reviewer','starCount', 'recipe').
  select('reviewer','starCount','recipe').by('name').by(outE('rated').
  values('stars').mean()).by(out('recipe').values('name'))

// RECIPES THAT CONTAIN BEEF
gremlin> :> g.V().hasLabel('recipe').out().has('iName','beef').in().hasLabel('recipe').values('name')
==>Beef Bourguignon

// RECIPES THAT CONTAIN EITHER BEEF OR CARROTS
gremlin> :> g.V().hasLabel('recipe').out().has('iName',within('beef','carrots')).in().hasLabel('recipe').values('name')
==>Beef Bourguignon
==>Carrot Soup

gremlin> :> g.V().group().by(label).by('name')
==>[meal:[JuliaDinner, Saturday Feast, EverydayDinner], ingredient:[olive oil, chicken broth, 
eggplant, pork sausage, green bell pepper, yellow onion, celery, hard-boiled egg, shallots, 
zucchini, butter, green beans, mashed garlic, onion, mushrooms, bacon, parsley, oyster, 
tomato, thyme, pork loin, tuna, tomato paste, ground beef, red wine, fennel, Pernod, 
chervil, egg noodles, carrots, beef], author:[Louisette Bertholie, Kelsie Kerr, 
Alice Waters, Julia Child, Emeril Lagasse, Simone Beck, Patricia Curtan, Patricia Simon, 
James Beard, Fritz Streiff], book:[Simca's Cuisine: 100 Classic French Recipes for Every 
Occasion, The French Chef Cookbook, The Art of Simple Food: Notes, Lessons, and Recipes 
from a Delicious Revolution, The Art of French Cooking, Vol. 1], recipe:[Wild Mushroom 
Stroganoff, Roast Pork Loin, Spicy Meatloaf, Rataouille, Beef Bourguignon, Oysters 
Rockefeller, Salade Nicoise, Carrot Soup], reviewer:[Sharon Smith, John Smith, Jane Doe, 
Betsy Jones, John Doe]]

gremlin> :> g.V().hasLabel('author').as('a','b').select('a','b').by('name').by(outE('authored').count())
==>[a:Julia Child, b:2]
==>[a:Patricia Curtan, b:1]
==>[a:Fritz Streiff, b:1]
==>[a:Kelsie Kerr, b:1]
==>[a:James Beard, b:0]
==>[a:Alice Waters, b:1]
==>[a:Patricia Simon, b:1]
==>[a:Simone Beck, b:2]
==>[a:Louisette Bertholie, b:1]
==>[a:Emeril Lagasse, b:0]

gremlin>  :> g.V().hasLabel('author').as('a','wrote').select('a','wrote').by('name').by(outE('authored').count())
==>[a:James Beard, wrote:0]
==>[a:Simone Beck, wrote:2]
==>[a:Julia Child, wrote:2]
==>[a:Emeril Lagasse, wrote:0]
==>[a:Patricia Simon, wrote:1]
==>[a:Louisette Bertholie, wrote:1]
==>[a:Kelsie Kerr, wrote:1]
==>[a:Alice Waters, wrote:1]
==>[a:Fritz Streiff, wrote:1]
==>[a:Patricia Curtan, wrote:1]

// How many recipes has Julia Child written?
gremlin> :> g.V().hasLabel('recipe').in().has('name','Julia Child').count()
==>1

// CLEANER VERSION OF LAST TRAVERSAL
gremlin> :> g.V().hasLabel('ingredient').has('name',within('beef','carrots')).in().hasLabel('recipe').values('name')
==>Beef Bourguignon
==>Carrot Soup

gremlin> :> g.V().hasLabel('recipe').in().has('name','Julia Child').count().profile().cap(TraversalMetrics.METRICS_KEY)
==>Traversal Metrics
Step                                                               Count  Traversers       Time (ms)    % Dur
=============================================================================================================
DsegGraphStep([~label.eq(recipe)])                                     8           8          17.134    17.43
  query-optimizer                                                                              0.399
  sub-query                                                                                    0.000
  iterator-setup                                                                               0.281
DsegVertexStep(IN,vertex)                                             13          13          17.106    17.40
  query-optimizer-total                                                                        0.117
  sub-query-total                                                                              0.000
  iterator-setup-total                                                                         1.885
HasStep([aname.eq(Julia Child)])                                       1           1          23.307    23.71
CountGlobalStep                                                        1           1          17.204    17.50
SideEffectCapStep([~metrics])                                          1           1          23.546    23.95
                                            >TOTAL                     -           -          98.299        -


*** 
IDEA: categories for recipes
separate vertex type?
****


*** DONE ABOVE WITH AUTHORS AND BOOKS
// For each category vertex, emit a map of its name and the number of movies it represents.
// Both a vertex type category and an edge label category - this is from movie lens
g.V().hasLabel('category').as('a','b').
 select('a','b').
    by('name').
    by(inE('category').count())
***************
    
// For each movie, emit a map of its name and average rating. Sort maps in decr. order by avg rating. Top 10 only
g.V().hasLabel('movie').as('a','b').
 select('a','b').
    by('name').
    by(inE('rated').values('stars').mean()).
  order().by(select('b'), decr).
  limit(10)
  
  actually needs to be this to fix empty stars value:
  
 g.V().hasLabel('movie').as('a','b').
  select('a','b').
    by('name').
    by(coalesce(
      inE('rated').values('stars'), constant()).mean()).
  order().by(select('b'), decr).
  limit(10) 
  
  // For each movie with at least 11 ratings emit a map of its name and avg rating. sort maps in decr order by avg rating. Top 10 only
  g.V().hasLabel('movie').as('a','b').
    where(inE('rated').count().is(gt(10))).
    select('a','b').
      by('name').
      by(inE('rated').values('stars').mean()).
    order().by(select('b'), decr).
    limit(10)
    
    // Which programmers like Die Hard and what other movies do they like? Group and count the movies by their name.
    // Sort group count map in decr order by count. Clip map to top 10 and stream out map's entries
    
  g.V().has('movie','name','Die Hard').as('a').
    inE('rated').has('stars',5).outV().
      where(out('occupation').has('name','programmer')).
    outE('rated').has('stars',5).inV(). 
      where(neq('a')).
    groupCount().by('name').
      order(local).by(valueDecr).
      limit(local,10).
      unfold()   // this puts each movie on its own line