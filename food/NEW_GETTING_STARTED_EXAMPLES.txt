:remote connect tinkerpop.server conf/remote-objects.yaml

*******
system.createGraph("test").build();
*********

:remote config alias g test.g

// FOR CLEANUP
:> g.V().drop().iterate()

:> g.V().count()
=>0

// ENTER AUTHOR VERTEX
:> juliaChild = graph.addVertex(label,'author','id', 1, 'aname','Julia Child', 'gender','F')
==>v[{member_id=0, community_id=184435, ~label=author, group_id=3}]

:> g.V().count()
=>1

 :> g.V().valueMap()
==>[gender:[F], aname:[Julia Child], id:[1]]

:> g.V().values('aname')
==>Julia Child

// ENTER BOOK VERTEX
:> artOfFrenchCookingVolOne = graph.addVertex(label, 'book', 'id', 100,'bookTitle', 'The Art of French Cooking, Vol. 1', 'publishDate', 1961)
==>v[{member_id=0, community_id=264788, ~label=book, group_id=2}]

:> g.V().hasLabel('book').values('bookTitle')
==>The Art of French Cooking, Vol. 1

// ENTER AUTHOR-BOOK EDGE
:> juliaChild.addEdge('authored', artOfFrenchCookingVolOne)
==>e[{out_vertex={member_id=0, community_id=184435, ~label=author, group_id=2}, local_id=312468c0-b99a-11e5-bdeb-e778035ca1a5, 
in_vertex={member_id=0, community_id=113313, ~label=book, group_id=4}, ~type=authored}][{member_id=0, community_id=184435, 
~label=author, group_id=2}-authored->{member_id=0, community_id=113313, ~label=book, group_id=4}]

:> g.E().count()
==>1
----------
// RUN A SCRIPT TO ADD MORE VERTICES AND EDGES
//script = new File('/path/to/script/generateRecipe.groovy').text; []
script = new File('/home/ubuntu/generateRecipe.groovy').text; []
:> @script

// GET VERTEX FOR PARTICULAR AUTHOR
:> g.V().has('aname','Julia Child')
==>v[{member_id=0, community_id=184435, ~label=author, group_id=2}]

// GET EDGES FROM PARTICULAR AUTHOR VERTEX
:> g.V().has('aname','Julia Child').outE('authored')
==>e[{out_vertex={member_id=0, community_id=966350, ~label=author, group_id=3}, local_id=1c947f80-ba67-11e5-bdeb-e778035ca1a5, in_vertex={member_id=0, community_id=966350, ~label=book, group_id=14}, ~type=authored}][{member_id=0, community_id=966350, ~label=author, group_id=3}-authored->{member_id=0, community_id=966350, ~label=book, group_id=14}]
==>e[{out_vertex={member_id=0, community_id=184435, ~label=author, group_id=4}, local_id=c41d5980-ba61-11e5-bdeb-e778035ca1a5, in_vertex={member_id=0, community_id=966350, ~label=book, group_id=1}, ~type=authored}][{member_id=0, community_id=184435, ~label=author, group_id=4}-authored->{member_id=0, community_id=966350, ~label=book, group_id=1}]

// GET BOOK TITLES FOR ALL AUTHORS
// Note duplication for multiple authors
:> g.V().outE('authored').inV().values('bookTitle')
==>The Art of Simple Food: Notes, Lessons, and Recipes from a Delicious Revolution
==>The Art of Simple Food: Notes, Lessons, and Recipes from a Delicious Revolution
==>Simca's Cuisine: 100 Classic French Recipes for Every Occasion
==>The Art of French Cooking, Vol. 1
==>The Art of Simple Food: Notes, Lessons, and Recipes from a Delicious Revolution
==>The Art of French Cooking, Vol. 1
==>Simca's Cuisine: 100 Classic French Recipes for Every Occasion
==>The Art of French Cooking, Vol. 1
==>The French Chef Cookbook

// GET BOOK TITLES FOR PARTICULAR AUTHOR
// Uses outE() and inV() which is overkill - edge information is not needed, just passed through
:> g.V().has('aname','Julia Child').outE('authored').inV().values('bookTitle')
==>The Art of French Cooking, Vol. 1
==>The French Chef Cookbook

// GET BOOK TITLES FOR PARTICULAR AUTHOR
// Use out() which gets next vertex
:> g.V().has('aname','Julia Child').out('authored').values('bookTitle')
==>The Art of French Cooking, Vol. 1
==>The French Chef Cookbook

// GET BOOK TITLES FOR PARTICULAR AUTHOR WITH A PUBLISH DATE GREATER THAN 1967
 :> g.V().has('aname','Julia Child').out('authored').has('publishDate', gt(1967)).values('bookTitle')
==>The French Chef Cookbook

// SILLLY, BUT .... the mean of the recipe creation dates
// SEE DOWN LOWER FOR DIFFERENT mean()
:> g.E().has('rCreateDate').values('rCreateDate').mean()
==>1981.5

// FOR EACH VERTEX LABEL, GET THE NUMBER OF VERTICES
gremlin> :> g.V().label().groupCount()
==>[ingredient:31, author:10, book:4, recipe:8]

**************************
// RUN SCRIPT TO ADD RECIPE REVIEWS
script2 = new File('/home/ubuntu/generateReviews.groovy').text; []
:> @script2

// GET A COUNT OF REVIEWS
:> g.V().hasLabel('reviewer').count()
==>5

// GET THE VALUES FOR ALL REVIEWERS TO CHECK
gremlin> :> g.V().hasLabel('reviewer').values()
==>401
==>John Smith
==>403
==>Sharon Smith
==>404
==>Betsy Jones
==>402
==>Jane Doe
==>400
==>John Doe

// GET THE VALUEMAP FOR EACH EDGE THAT HAS MORE THAN 3 STARS
gremlin> :> g.E().hasLabel('rated').has('stars', gt(3)).valueMap()
==>[stars:4, ratedDate:2014-01-23]
==>[comment:Yummy!, stars:5, ratedDate:2014-02-01]
==>[comment:Loved this soup! Yummy vegetarian!, stars:5, ratedDate:2015-12-30]
==>[comment:Pretty tasty!, stars:5, ratedDate:2014-01-01]
==>[comment:Really spicy - be careful!, stars:4, ratedDate:2015-12-31]

// GET THE VALUEMAP FOR EACH EDGE THAT HAS MORE THAN 3 STARS AND A RATED DATE GREATER THAN JAN 1, 2015
// Need to figure out dates!! Notice how the date value is parsed by greater than
gremlin> :> g.E().hasLabel('rated').has('stars', gt(3)).has('ratedDate', gt('2015-01-01')).valueMap()
==>[comment:Loved this soup! Yummy vegetarian!, stars:5, ratedDate:2015-12-30]
==>[comment:Really spicy - be careful!, stars:4, ratedDate:2015-12-31]

// How many recipes has Julia Child written?
gremlin> :> g.V().hasLabel('recipe').in().has('aname','Julia Child').count()
==>1

// MEAN STARS
:> g.E().hasLabel('rated').values('stars').mean()
****GET VALUE
==>
******

// FIND  THE MAX NUMBER OF RECIPE REVIEWS BY A SINGLE REVIEWER
:> g.V().hasLabel('reviewer').map(outE('rated').count()).max()

NOTES FOR FRIDAY:
NEED TO SET UP VM TO BUILD BDP AND HULK FROM REPOS
use these instructions: https://datastax.jira.com/wiki/pages/viewpage.action?pageId=106790929
make sure Java 8 is installed

// NOT QUITE RIGHT
:> g.V().hasLabel('recipe').out().has('iName','beef').valueMap()
==>[iName:[beef], id:[300]]
// I wanted the recipe names that contain beef

// SAME ISSUE
gremlin> :> g.V().hasLabel('recipe').out().has('iName',within('beef','mashed garlic')).valueMap()
==>[iName:[beef], id:[300]]
==>[iName:[mashed garlic], id:[302]]
==>[iName:[mashed garlic], id:[302]]

gremlin> :> g.V().hasLabel('recipe').in().has('aname','Julia Child').count().profile().cap(TraversalMetrics.METRICS_KEY)
==>Traversal Metrics
Step                                                               Count  Traversers       Time (ms)    % Dur
=============================================================================================================
DsegGraphStep([~label.eq(recipe)])                                     8           8          17.134    17.43
  query-optimizer                                                                              0.399
  sub-query                                                                                    0.000
  iterator-setup                                                                               0.281
DsegVertexStep(IN,vertex)                                             13          13          17.106    17.40
  query-optimizer-total                                                                        0.117
  sub-query-total                                                                              0.000
  iterator-setup-total                                                                         1.885
HasStep([aname.eq(Julia Child)])                                       1           1          23.307    23.71
CountGlobalStep                                                        1           1          17.204    17.50
SideEffectCapStep([~metrics])                                          1           1          23.546    23.95
                                            >TOTAL                     -           -          98.299        -

gremlin> :> g.V().hasLabel('reviewer').has('revname','John Doe').outE('rated').valueMap()
==>[comment:Pretty tasty!, stars:5, ratedDate:2014-01-01]
==>[comment:Really spicy - be careful!, stars:4, ratedDate:2015-12-31]

// THIS IS THE ACTUAL ONE! What did John Doe have to say?
gremlin> :> g.V().hasLabel('reviewer').has('revname','John Doe').outE('rated').values('comment')
==>Pretty tasty!
==>Really spicy - be careful!

gremlin> :> g.V().hasLabel('reviewer').has('revname','John Doe').outE('rated').inV().values('recipeTitle')
==>Beef Bourguignon
==>Spicy Meatloaf

CHECK OUT THIS INFO:
system.createGraph("test_single").build();
system.dropGraph("test");
system.getGraphs();

GRAPHS ARE NO LONGER AUTOGENERATED

// FROM SHAUNAK
gremlin> :> graph.config().toString()
==>com.datastax.bdp.gcore.config.userimpl.UserConfigImpl@55954cb9
gremlin> :> graph.config()
Request timed out while processing - increase the timeout with the :remote command

*** 
IDEA: categories for recipes
separate vertex type?
****


// For each category vertex, emit a map of its name and the number of movies it represents.
// Both a vertex type category and an edge label category - this is from movie lens
g.V().hasLabel('category').as('a','b').
 select('a','b').
    by('name').
    by(inE('category').count())
    
// For each movie, emit a map of its name and average rating. Sort maps in decr. order by avg rating. Top 10 only
g.V().hasLabel('movie').as('a','b').
 select('a','b').
    by('name').
    by(inE('rated').values('stars').mean()).
  order().by(select('b'), decr).
  limit(10)
  
  actually needs to be to fix empty stars value:
  
 g.V().hasLabel('movie').as('a','b').
  select('a','b').
    by('name').
    by(coalesce(
      inE('rated').values('stars'), constant()).mean()).
  order().by(select('b'), decr).
  limit(10) 
  
  // For each movie with at least 11 ratings emilt a map of its name and avg rating. sort maps in decr order by avg rating. Top 10 only
  g.V().hasLabel('movie').as('a','b').
    where(inE('rated').cout().is(gt(10))).
    select('a','b').
      by('name').
      by(inE('rated').values('stars').mean()).
    order().by(select('b'), decr).
    limit(10)